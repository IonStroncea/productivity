@page
@inject IHttpContextAccessor httpContextaccessor
@model WebSite.Pages.LiveDataModel
@{
}
<script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.9.4/Chart.js">
</script>
<script type="text/javascript" src="https://cdn.jsdelivr.net/jquery/latest/jquery.min.js"></script>
<script type="text/javascript" src="https://cdn.jsdelivr.net/momentjs/latest/moment.min.js"></script>
<script type="text/javascript" src="~/js/moment.min.js"></script>
<script type="text/javascript" src="~/js/date.js"></script>

<div class="row">
    <div class="col-2">
        <select class="form-select" aria-label="Default select example" id="typeData">
            <option value = "RAM" selected>RAM</option>
            <option value="CPU">CPU</option>
            <option value="GPU">GPU</option>
        </select>
        <br/>
        <select class="form-select" aria-label="Default select example" id="computerId">
            <option value="0" selected>Select computer</option>
            @foreach (var computer in @Model.computers)
            {
                <option value="@computer.Key">@computer.Value</option>
            }
        </select>
        <br/>
        <button type="button" class="btn btn-primary" onclick="recreateSocket()">Submit</button>
    </div>
    <div class="col-10">
        <canvas id="myChart" style="width:100%;max-width:1000px"></canvas>
     </div>
</div>

<script>
    var xValues = [];
    var yValues = [];


    function redraw() {
        new Chart("myChart", {
            type: "line",
            data: {
                labels: xValues,
                datasets: [{
                    fill: false,
                    lineTension: 0,
                    backgroundColor: "rgba(0,0,255,1.0)",
                    borderColor: "rgba(0,0,255,0.1)",
                    data: yValues
                }]
            },
            options: {
                legend: { display: false },
                scales: {
                    yAxes: [{ ticks: { min: 0, max: 100 } }],
                }
            }
        });
    }
</script>
<script>
    var ws;
    var typeData;
    var computerId;
    var userId = '@httpContextaccessor.HttpContext.Session.GetInt32("userId")';


    $(document).ready(function () {  
        for (let i = 0; i < 100; i++) {
            xValues.push(0);     
            yValues.push(0);
        }

        typeData = document.getElementById("typeData").value;
        computerId = document.getElementById("computerId").value;

        redraw();
        ws = CreateSocket();
    });

    function recreateSocket()
    {
        typeData = document.getElementById("typeData").value;
        computerId = document.getElementById("computerId").value;

        xValues = [];
        yValues = [];

        for (let i = 0; i < 100; i++) {
            xValues.push(0);     
            yValues.push(0);
        }
    }

    function CreateSocket()
    {
        var scheme = document.location.protocol == "https:" ?"wss" : "ws";
        var url = '' + scheme + '://localhost:7155/api/LiveData';
        var ws = new WebSocket(url);

        ws.onopen = function()
        {
            ws.send(typeData + "+" + computerId + "+" + '@httpContextaccessor.HttpContext.Session.GetInt32("userId")');
        }

        ws.onmessage = function(evt)
        {
            var recieved_msg = JSON.parse(evt.data);

            xValues.shift();
            yValues.shift();

            xValues.push(recieved_msg.date);      
            yValues.push(recieved_msg.usage);

            ws.send(typeData + "+" + computerId + "+" + '@httpContextaccessor.HttpContext.Session.GetInt32("userId")');

            redraw();
        }

        ws.onclose = function (event){
            if(event.wasClean)
            {
                //console.log("Connection closed");
            }
            else
            {
                alert('Connection error');
                //console.log("Connection killed");
            }
        };


        return ws;
    }

</script>
