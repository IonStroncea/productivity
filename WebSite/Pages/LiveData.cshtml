@page
@inject IHttpContextAccessor httpContextaccessor
@model WebSite.Pages.LiveDataModel
@{
}
<script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.9.4/Chart.js">
</script>
<script type="text/javascript" src="https://cdn.jsdelivr.net/jquery/latest/jquery.min.js"></script>
<script type="text/javascript" src="https://cdn.jsdelivr.net/momentjs/latest/moment.min.js"></script>
<script type="text/javascript" src="~/js/moment.min.js"></script>
<script type="text/javascript" src="~/js/date.js"></script>

<div class="row mb-1">
    <div class = "col">
        <form method="post">
            <button type="submit" class="btn btn-primary" asp-page-handler="edit" asp-route-graphs="@(Model.graphs > 1 ? Model.graphs - 1 : Model.graphs)">Remove Graph</button>
        </form>
    </div>
    <div class = "col">
        <form method="post">
            <button type="submit" class="btn btn-primary" asp-page-handler="edit" asp-route-graphs="@(Model.graphs + 1)">Add Graph</button>
        </form>
    </div>
</div>
<br/>

@for(int i = 0; i< Model.graphs; i++)
{
    <div class="row">
        <div class="col-2">
            <select class="form-select" aria-label="Default select example" id="typeData @i">
                <option value = "RAM" selected>RAM</option>
                <option value="CPU">CPU</option>
                <option value="GPU">GPU</option>
            </select>
            <br/>
            <select class="form-select" aria-label="Default select example" id="computerId @i">
                <option value="0" selected>Select computer</option>
                @foreach (var computer in @Model.computers)
                {
                    <option value="@computer.Key">@computer.Value</option>
                }
            </select>
            <br/>
            <button type="button" class="btn btn-primary" onclick="recreateSocket(@i)">Submit</button>
        </div>
        <div class="col-9">
            <canvas id="myChart @i" style="width:100%;max-width:1000px"></canvas>
         </div>
        <div class="col-1">
            <div id="percentHeight @i"></div>
            <p id="percentValue @i"></p>
        </div>
    </div>
}

<script>
    var xValues = new Array(@Model.graphs);
    var yValues = new Array(@Model.graphs);
    var height = new Array(@Model.graphs);

    function redraw(id) {
        new Chart("myChart " + id, {
            type: "line",
            data: {
                labels: xValues[id],
                datasets: [{
                    fill: true,
                    lineTension: 0,
                    backgroundColor: "rgba(0,0,255,0.1)",
                    borderColor: "rgba(0,0,255,0.5)",
                    data: yValues[id]
                }]
            },
            options: {
                legend: { display: false },
                scales: {
                    yAxes: [{ ticks: { min: 0, max: 100 } }],
                },
                animation: {
                    duration: 0
                }
            }
        });
    }
</script>
<script>
    var ws = new Array(@Model.graphs);
    var typeData = new Array(@Model.graphs);
    var computerId = new Array(@Model.graphs);
    var userId = '@httpContextaccessor.HttpContext.Session.GetInt32("userId")';


    $(document).ready(function () {
        for (let i = 0; i < @Model.graphs; i++) {
            xValues[i] = new Array(0);
            yValues[i] = new Array(0);
            height[i] = 0;

            for (let count = 0; count < 100; count++) {
                xValues[i].push(0);     
                yValues[i].push(0);
            }
        }

        for(let i = 0; i < @Model.graphs; i++) {
            typeData[i] = document.getElementById("typeData " + i).value;
            computerId[i] = document.getElementById("computerId " + i).value;
        
        redraw(i);
        ws[i] = CreateSocket(i);
        }
    });

    function recreateSocket(id)
    {
        typeData[id] = document.getElementById("typeData " + id).value;
        computerId[id] = document.getElementById("computerId " + id).value;

        xValues[id] = new Array(0);
        yValues[id] = new Array(0);

        for (let i = 0; i < 100; i++) {
            xValues[id].push(0);     
            yValues[id].push(0);
        }
    }

    function CreateSocket(id)
    {
        var address = '@Model.server';
        address = address.replace('https', '');
        var scheme = document.location.protocol == "https:" ?"wss" : "ws";
        var url = '' + scheme + address + '/api/LiveData';
        var ws = new WebSocket(url);

        ws.onopen = function()
        {
            ws.send(typeData[id] + "+" + computerId[id] + "+" + '@httpContextaccessor.HttpContext.Session.GetInt32("userId")');
        }

        ws.onmessage = function(evt)
        {
            var recieved_msg = JSON.parse(evt.data);

            xValues[id].shift();
            yValues[id].shift();

            xValues[id].push(recieved_msg.date);      
            yValues[id].push(recieved_msg.usage);

            height[id] = recieved_msg.usage;

            ws.send(typeData[id] + "+" + computerId[id] + "+" + '@httpContextaccessor.HttpContext.Session.GetInt32("userId")');

            document.getElementById('percentValue ' + id).innerText = height[id] + "%";
            document.getElementById("percentHeight " + id).style.minHeight = (370 - (height[id] / 100 * 370)) + "px";

            redraw(id);
            
        }

        ws.onclose = function (event){
            if(event.wasClean)
            {
                //console.log("Connection closed");
            }
            else
            {
                alert('Connection error');
                //console.log("Connection killed");
            }
        };


        return ws;
    }

</script>
